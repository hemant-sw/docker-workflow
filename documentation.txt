To create image of any repo or project.


1- first we have to create a docker file 
   - Docker file should be name as Dockerfile
   - In docker file we write all step required to run in order to run our app perfectly 
   - Docker file should be hidden when we docekerizing our app for that we make docker ignore file
     (.dockerignore) in this we write all files that should be hidden.


2- To make image of our current project we use command
       ( docker build -t image-name .)
    - Above command will create iamge of our project 
    - To view all images that are present either you can see from docker desktop app or by running
     a command (docker image ls)
     - this command will list all the images present inside our system

To run image -     


1 - After creating image of your project next you need to run it to do that you need to run a command
   ( docker run -d --name my-app my-image)
    - But with this command you will not able to run it on your browser, to run in browser you need to
      specify port for that use command 
      ( docker run -d -p 3000:3000 --name my-app my-image)
    - By use this command you can run it on your browser (localhost:3000)


To sync our codes by using Bind mounts - 

    
1 - We almost all done but problem is that when we make any changers in our app it will not to going to 
    show in our browser that is because we have created image of our project before we make that changes 
    (image created on 11:00 PM but we make changes after 11:00 PM) to view those changes again we have to
    to delete the running container 
    
  - To delete container use this command 
    [ docker rm my-app-name -f ]

  - After that you also need to delete image - to delete image use this command 
    [ docker image rm my-image ] 

  - And you again need repeat the whole step like create image & run that in browser after that you will see
    your changer and that is very hectic process.

  - To over come this issue for that we use Volumes (bind mounts).

  - To save changes locally we use another command for that we need to delete the running container and use this command
    [ docker run -v ${pwd}/src:/app/src -d -p 3000:3000 --name my-app my-image ] use this command in powershell

  - But in windows to view changes on browser use this
    [ docker run -e WATCHPACK_POLLING=true -v ${pwd}/src:/app/src -d -p 3000:3000 --name my-app my-image ] 

To make Read only Bind-Mounts - 

1 - This data should be in read-only format beacuse after development we don't want any changes in our project for that run
    this command
    [ docker run -e WATCHPACK_POLLING=true -v ${pwd}/src:/app/src:ro -d -p 3000:3000 --name my-app my-image ]

Command line are very long and hard to write to make cmd line cleaner we use files.

* During development process we use this files 
    -  Dockerfile
    -  docker-compose.yaml
    - .dockerignore
    - .env

1 - To make our command cleaner we use separate enviromental variable file
  - Create a fil (.env and wite all your en variable in  it)

2 - To simplify our CLI more we create one more file (yaml file) and we name as [ docker-compose.yaml ] and in this file we but all necessary
    like -
          version: "3"
          services:
           react-app:
              build:
              context: .
              dockerfile: Dockerfile.dev
          ports:
              - "3000:3000"
          volumes:
              - ./src:/app/src
          environment:
              - REACT_APP_NAME=hemant
              - CHINESE_FOOD= rtuoh
              - WATCHPACK_POLLING=TRUE

  - After creating this yaml file we don't need to use any leanthy run commands.
  - To run our all services and container we just use this command
     { docker-compose up -d}
  - But with this command we just run our container but when we make changes in our dockerfile it will not be synced in our images.
  - To overcome this issue we have to build a brand new image every time when we up the container for this use this command.
      { docker-compose up -d --build } 
  - To bring all container down we have to use this comamnd 
      { docker-compose down}    
      
  - To push image on docker hub 
      - First you have to login in your docker by typing  this command
        [ docker login --username=<user username> --password=<user password> ]
      - After that use this command -
        [ docker tag my-image username/my-repo ] { You will have to create a repo in docker hub}
      - At last you just need to push it by using this command
        [ docker push username/my-repo ]
      - All done

  - To pull image from docker hub -
      - Fist go to dockerhub and search specfic image name which you want to pull.
      - After when you entered in the repo you will see option -pull this image-
      - Just copy that line of code and go to your terminal.
      - In terminal just  paste pull command that you have copied
      - And image is created to see iamge just enter this command
        [ docker images] - it will list all the images
      - To run that image in your system use this command -
        [ docker run -d -p <port:port <image-Id ]
      - All done

      

          
            


       
      
